// Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  queue: (where?: QueueWhereInput) => Promise<boolean>;
  slip: (where?: SlipWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  comment: (where: CommentWhereUniqueInput) => CommentNullablePromise;
  comments: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Comment>;
  commentsConnection: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CommentConnectionPromise;
  queue: (where: QueueWhereUniqueInput) => QueueNullablePromise;
  queues: (args?: {
    where?: QueueWhereInput;
    orderBy?: QueueOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Queue>;
  queuesConnection: (args?: {
    where?: QueueWhereInput;
    orderBy?: QueueOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => QueueConnectionPromise;
  slip: (where: SlipWhereUniqueInput) => SlipNullablePromise;
  slips: (args?: {
    where?: SlipWhereInput;
    orderBy?: SlipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Slip>;
  slipsConnection: (args?: {
    where?: SlipWhereInput;
    orderBy?: SlipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SlipConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (args: {
    data: CommentUpdateInput;
    where: CommentWhereUniqueInput;
  }) => CommentPromise;
  updateManyComments: (args: {
    data: CommentUpdateManyMutationInput;
    where?: CommentWhereInput;
  }) => BatchPayloadPromise;
  upsertComment: (args: {
    where: CommentWhereUniqueInput;
    create: CommentCreateInput;
    update: CommentUpdateInput;
  }) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createQueue: (data: QueueCreateInput) => QueuePromise;
  updateQueue: (args: {
    data: QueueUpdateInput;
    where: QueueWhereUniqueInput;
  }) => QueuePromise;
  updateManyQueues: (args: {
    data: QueueUpdateManyMutationInput;
    where?: QueueWhereInput;
  }) => BatchPayloadPromise;
  upsertQueue: (args: {
    where: QueueWhereUniqueInput;
    create: QueueCreateInput;
    update: QueueUpdateInput;
  }) => QueuePromise;
  deleteQueue: (where: QueueWhereUniqueInput) => QueuePromise;
  deleteManyQueues: (where?: QueueWhereInput) => BatchPayloadPromise;
  createSlip: (data: SlipCreateInput) => SlipPromise;
  updateSlip: (args: {
    data: SlipUpdateInput;
    where: SlipWhereUniqueInput;
  }) => SlipPromise;
  updateManySlips: (args: {
    data: SlipUpdateManyMutationInput;
    where?: SlipWhereInput;
  }) => BatchPayloadPromise;
  upsertSlip: (args: {
    where: SlipWhereUniqueInput;
    create: SlipCreateInput;
    update: SlipUpdateInput;
  }) => SlipPromise;
  deleteSlip: (where: SlipWhereUniqueInput) => SlipPromise;
  deleteManySlips: (where?: SlipWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  queue: (
    where?: QueueSubscriptionWhereInput
  ) => QueueSubscriptionPayloadSubscription;
  slip: (
    where?: SlipSubscriptionWhereInput
  ) => SlipSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type StatusType = "ACTIVE" | "DEACTIVE";

export type SlipOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "processed_ASC"
  | "processed_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updateAt_ASC"
  | "updateAt_DESC";

export type ProcessedType = "WAITING" | "PROCESSED" | "CANCELLED";

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "body_ASC"
  | "body_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updateAt_ASC"
  | "updateAt_DESC";

export type QueueOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "status_ASC"
  | "status_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updateAt_ASC"
  | "updateAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updateAt_ASC"
  | "updateAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface SlipUpdateManyWithoutQueueInput {
  create?: Maybe<SlipCreateWithoutQueueInput[] | SlipCreateWithoutQueueInput>;
  delete?: Maybe<SlipWhereUniqueInput[] | SlipWhereUniqueInput>;
  connect?: Maybe<SlipWhereUniqueInput[] | SlipWhereUniqueInput>;
  set?: Maybe<SlipWhereUniqueInput[] | SlipWhereUniqueInput>;
  disconnect?: Maybe<SlipWhereUniqueInput[] | SlipWhereUniqueInput>;
  update?: Maybe<
    | SlipUpdateWithWhereUniqueWithoutQueueInput[]
    | SlipUpdateWithWhereUniqueWithoutQueueInput
  >;
  upsert?: Maybe<
    | SlipUpsertWithWhereUniqueWithoutQueueInput[]
    | SlipUpsertWithWhereUniqueWithoutQueueInput
  >;
  deleteMany?: Maybe<SlipScalarWhereInput[] | SlipScalarWhereInput>;
  updateMany?: Maybe<
    SlipUpdateManyWithWhereNestedInput[] | SlipUpdateManyWithWhereNestedInput
  >;
}

export type CommentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpdateWithoutSlipsDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  updateAt?: Maybe<DateTimeInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  slips_every?: Maybe<SlipWhereInput>;
  slips_some?: Maybe<SlipWhereInput>;
  slips_none?: Maybe<SlipWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updateAt?: Maybe<DateTimeInput>;
  updateAt_not?: Maybe<DateTimeInput>;
  updateAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updateAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updateAt_lt?: Maybe<DateTimeInput>;
  updateAt_lte?: Maybe<DateTimeInput>;
  updateAt_gt?: Maybe<DateTimeInput>;
  updateAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface CommentUpdateManyWithoutAuthorInput {
  create?: Maybe<
    CommentCreateWithoutAuthorInput[] | CommentCreateWithoutAuthorInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutAuthorInput[]
    | CommentUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutAuthorInput[]
    | CommentUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  body?: Maybe<String>;
  body_not?: Maybe<String>;
  body_in?: Maybe<String[] | String>;
  body_not_in?: Maybe<String[] | String>;
  body_lt?: Maybe<String>;
  body_lte?: Maybe<String>;
  body_gt?: Maybe<String>;
  body_gte?: Maybe<String>;
  body_contains?: Maybe<String>;
  body_not_contains?: Maybe<String>;
  body_starts_with?: Maybe<String>;
  body_not_starts_with?: Maybe<String>;
  body_ends_with?: Maybe<String>;
  body_not_ends_with?: Maybe<String>;
  queue?: Maybe<QueueWhereInput>;
  author?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updateAt?: Maybe<DateTimeInput>;
  updateAt_not?: Maybe<DateTimeInput>;
  updateAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updateAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updateAt_lt?: Maybe<DateTimeInput>;
  updateAt_lte?: Maybe<DateTimeInput>;
  updateAt_gt?: Maybe<DateTimeInput>;
  updateAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  OR?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  NOT?: Maybe<CommentWhereInput[] | CommentWhereInput>;
}

export interface SlipCreateManyWithoutUserInput {
  create?: Maybe<SlipCreateWithoutUserInput[] | SlipCreateWithoutUserInput>;
  connect?: Maybe<SlipWhereUniqueInput[] | SlipWhereUniqueInput>;
}

export interface CommentUpdateManyWithoutQueueInput {
  create?: Maybe<
    CommentCreateWithoutQueueInput[] | CommentCreateWithoutQueueInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutQueueInput[]
    | CommentUpdateWithWhereUniqueWithoutQueueInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutQueueInput[]
    | CommentUpsertWithWhereUniqueWithoutQueueInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface SlipCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  processed: ProcessedType;
  queue: QueueCreateOneWithoutSlipsInput;
  updateAt: DateTimeInput;
}

export interface CommentUpdateWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutAuthorDataInput;
}

export interface QueueCreateOneWithoutSlipsInput {
  create?: Maybe<QueueCreateWithoutSlipsInput>;
  connect?: Maybe<QueueWhereUniqueInput>;
}

export interface SlipWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  processed?: Maybe<ProcessedType>;
  processed_not?: Maybe<ProcessedType>;
  processed_in?: Maybe<ProcessedType[] | ProcessedType>;
  processed_not_in?: Maybe<ProcessedType[] | ProcessedType>;
  queue?: Maybe<QueueWhereInput>;
  user?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updateAt?: Maybe<DateTimeInput>;
  updateAt_not?: Maybe<DateTimeInput>;
  updateAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updateAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updateAt_lt?: Maybe<DateTimeInput>;
  updateAt_lte?: Maybe<DateTimeInput>;
  updateAt_gt?: Maybe<DateTimeInput>;
  updateAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SlipWhereInput[] | SlipWhereInput>;
  OR?: Maybe<SlipWhereInput[] | SlipWhereInput>;
  NOT?: Maybe<SlipWhereInput[] | SlipWhereInput>;
}

export interface QueueCreateWithoutSlipsInput {
  id?: Maybe<ID_Input>;
  title: String;
  comments?: Maybe<CommentCreateManyWithoutQueueInput>;
  status: StatusType;
  updateAt: DateTimeInput;
}

export interface QueueSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<QueueWhereInput>;
  AND?: Maybe<QueueSubscriptionWhereInput[] | QueueSubscriptionWhereInput>;
  OR?: Maybe<QueueSubscriptionWhereInput[] | QueueSubscriptionWhereInput>;
  NOT?: Maybe<QueueSubscriptionWhereInput[] | QueueSubscriptionWhereInput>;
}

export interface CommentCreateManyWithoutQueueInput {
  create?: Maybe<
    CommentCreateWithoutQueueInput[] | CommentCreateWithoutQueueInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  updateAt?: Maybe<DateTimeInput>;
}

export interface CommentCreateWithoutQueueInput {
  id?: Maybe<ID_Input>;
  title: String;
  body: String;
  author: UserCreateOneWithoutCommentsInput;
  updateAt: DateTimeInput;
}

export type QueueWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  title?: Maybe<String>;
}>;

export interface CommentUpdateInput {
  title?: Maybe<String>;
  body?: Maybe<String>;
  queue?: Maybe<QueueUpdateOneRequiredWithoutCommentsInput>;
  author?: Maybe<UserUpdateOneRequiredWithoutCommentsInput>;
  updateAt?: Maybe<DateTimeInput>;
}

export interface SlipUpdateManyMutationInput {
  processed?: Maybe<ProcessedType>;
  updateAt?: Maybe<DateTimeInput>;
}

export interface QueueUpdateOneRequiredWithoutCommentsInput {
  create?: Maybe<QueueCreateWithoutCommentsInput>;
  update?: Maybe<QueueUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<QueueUpsertWithoutCommentsInput>;
  connect?: Maybe<QueueWhereUniqueInput>;
}

export interface SlipCreateInput {
  id?: Maybe<ID_Input>;
  processed: ProcessedType;
  queue: QueueCreateOneWithoutSlipsInput;
  user: UserCreateOneWithoutSlipsInput;
  updateAt: DateTimeInput;
}

export interface QueueUpdateWithoutCommentsDataInput {
  title?: Maybe<String>;
  slips?: Maybe<SlipUpdateManyWithoutQueueInput>;
  status?: Maybe<StatusType>;
  updateAt?: Maybe<DateTimeInput>;
}

export interface QueueUpdateManyMutationInput {
  title?: Maybe<String>;
  status?: Maybe<StatusType>;
  updateAt?: Maybe<DateTimeInput>;
}

export interface CommentUpsertWithWhereUniqueWithoutQueueInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutQueueDataInput;
  create: CommentCreateWithoutQueueInput;
}

export interface QueueCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  slips?: Maybe<SlipCreateManyWithoutQueueInput>;
  comments?: Maybe<CommentCreateManyWithoutQueueInput>;
  status: StatusType;
  updateAt: DateTimeInput;
}

export interface SlipUpdateWithWhereUniqueWithoutQueueInput {
  where: SlipWhereUniqueInput;
  data: SlipUpdateWithoutQueueDataInput;
}

export interface CommentUpdateManyMutationInput {
  title?: Maybe<String>;
  body?: Maybe<String>;
  updateAt?: Maybe<DateTimeInput>;
}

export interface SlipUpdateWithoutQueueDataInput {
  processed?: Maybe<ProcessedType>;
  user?: Maybe<UserUpdateOneRequiredWithoutSlipsInput>;
  updateAt?: Maybe<DateTimeInput>;
}

export interface SlipUpsertWithWhereUniqueWithoutUserInput {
  where: SlipWhereUniqueInput;
  update: SlipUpdateWithoutUserDataInput;
  create: SlipCreateWithoutUserInput;
}

export interface UserUpdateOneRequiredWithoutSlipsInput {
  create?: Maybe<UserCreateWithoutSlipsInput>;
  update?: Maybe<UserUpdateWithoutSlipsDataInput>;
  upsert?: Maybe<UserUpsertWithoutSlipsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface QueueCreateOneWithoutCommentsInput {
  create?: Maybe<QueueCreateWithoutCommentsInput>;
  connect?: Maybe<QueueWhereUniqueInput>;
}

export interface CommentUpdateWithoutQueueDataInput {
  title?: Maybe<String>;
  body?: Maybe<String>;
  author?: Maybe<UserUpdateOneRequiredWithoutCommentsInput>;
  updateAt?: Maybe<DateTimeInput>;
}

export interface SlipCreateManyWithoutQueueInput {
  create?: Maybe<SlipCreateWithoutQueueInput[] | SlipCreateWithoutQueueInput>;
  connect?: Maybe<SlipWhereUniqueInput[] | SlipWhereUniqueInput>;
}

export interface QueueWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  slips_every?: Maybe<SlipWhereInput>;
  slips_some?: Maybe<SlipWhereInput>;
  slips_none?: Maybe<SlipWhereInput>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  status?: Maybe<StatusType>;
  status_not?: Maybe<StatusType>;
  status_in?: Maybe<StatusType[] | StatusType>;
  status_not_in?: Maybe<StatusType[] | StatusType>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updateAt?: Maybe<DateTimeInput>;
  updateAt_not?: Maybe<DateTimeInput>;
  updateAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updateAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updateAt_lt?: Maybe<DateTimeInput>;
  updateAt_lte?: Maybe<DateTimeInput>;
  updateAt_gt?: Maybe<DateTimeInput>;
  updateAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<QueueWhereInput[] | QueueWhereInput>;
  OR?: Maybe<QueueWhereInput[] | QueueWhereInput>;
  NOT?: Maybe<QueueWhereInput[] | QueueWhereInput>;
}

export interface UserCreateOneWithoutSlipsInput {
  create?: Maybe<UserCreateWithoutSlipsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface CommentUpdateWithWhereUniqueWithoutQueueInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutQueueDataInput;
}

export interface CommentCreateManyWithoutAuthorInput {
  create?: Maybe<
    CommentCreateWithoutAuthorInput[] | CommentCreateWithoutAuthorInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentUpdateWithoutAuthorDataInput {
  title?: Maybe<String>;
  body?: Maybe<String>;
  queue?: Maybe<QueueUpdateOneRequiredWithoutCommentsInput>;
  updateAt?: Maybe<DateTimeInput>;
}

export interface UserCreateOneWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface CommentUpsertWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutAuthorDataInput;
  create: CommentCreateWithoutAuthorInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface CommentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  body?: Maybe<String>;
  body_not?: Maybe<String>;
  body_in?: Maybe<String[] | String>;
  body_not_in?: Maybe<String[] | String>;
  body_lt?: Maybe<String>;
  body_lte?: Maybe<String>;
  body_gt?: Maybe<String>;
  body_gte?: Maybe<String>;
  body_contains?: Maybe<String>;
  body_not_contains?: Maybe<String>;
  body_starts_with?: Maybe<String>;
  body_not_starts_with?: Maybe<String>;
  body_ends_with?: Maybe<String>;
  body_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updateAt?: Maybe<DateTimeInput>;
  updateAt_not?: Maybe<DateTimeInput>;
  updateAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updateAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updateAt_lt?: Maybe<DateTimeInput>;
  updateAt_lte?: Maybe<DateTimeInput>;
  updateAt_gt?: Maybe<DateTimeInput>;
  updateAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  OR?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  NOT?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CommentWhereInput>;
  AND?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  OR?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  NOT?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  slips?: Maybe<SlipCreateManyWithoutUserInput>;
  updateAt: DateTimeInput;
}

export interface CommentUpdateManyDataInput {
  title?: Maybe<String>;
  body?: Maybe<String>;
  updateAt?: Maybe<DateTimeInput>;
}

export type SlipWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpsertWithoutSlipsInput {
  update: UserUpdateWithoutSlipsDataInput;
  create: UserCreateWithoutSlipsInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface SlipUpsertWithWhereUniqueWithoutQueueInput {
  where: SlipWhereUniqueInput;
  update: SlipUpdateWithoutQueueDataInput;
  create: SlipCreateWithoutQueueInput;
}

export interface QueueUpsertWithoutSlipsInput {
  update: QueueUpdateWithoutSlipsDataInput;
  create: QueueCreateWithoutSlipsInput;
}

export interface SlipScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  processed?: Maybe<ProcessedType>;
  processed_not?: Maybe<ProcessedType>;
  processed_in?: Maybe<ProcessedType[] | ProcessedType>;
  processed_not_in?: Maybe<ProcessedType[] | ProcessedType>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updateAt?: Maybe<DateTimeInput>;
  updateAt_not?: Maybe<DateTimeInput>;
  updateAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updateAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updateAt_lt?: Maybe<DateTimeInput>;
  updateAt_lte?: Maybe<DateTimeInput>;
  updateAt_gt?: Maybe<DateTimeInput>;
  updateAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SlipScalarWhereInput[] | SlipScalarWhereInput>;
  OR?: Maybe<SlipScalarWhereInput[] | SlipScalarWhereInput>;
  NOT?: Maybe<SlipScalarWhereInput[] | SlipScalarWhereInput>;
}

export interface QueueCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  title: String;
  slips?: Maybe<SlipCreateManyWithoutQueueInput>;
  status: StatusType;
  updateAt: DateTimeInput;
}

export interface SlipUpdateManyWithWhereNestedInput {
  where: SlipScalarWhereInput;
  data: SlipUpdateManyDataInput;
}

export interface UserCreateWithoutSlipsInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  comments?: Maybe<CommentCreateManyWithoutAuthorInput>;
  updateAt: DateTimeInput;
}

export interface SlipUpdateManyDataInput {
  processed?: Maybe<ProcessedType>;
  updateAt?: Maybe<DateTimeInput>;
}

export interface UserCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  slips?: Maybe<SlipCreateManyWithoutUserInput>;
  updateAt: DateTimeInput;
}

export interface QueueUpsertWithoutCommentsInput {
  update: QueueUpdateWithoutCommentsDataInput;
  create: QueueCreateWithoutCommentsInput;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  comments?: Maybe<CommentUpdateManyWithoutAuthorInput>;
  slips?: Maybe<SlipUpdateManyWithoutUserInput>;
  updateAt?: Maybe<DateTimeInput>;
}

export interface UserUpdateOneRequiredWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  update?: Maybe<UserUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<UserUpsertWithoutCommentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface QueueUpdateInput {
  title?: Maybe<String>;
  slips?: Maybe<SlipUpdateManyWithoutQueueInput>;
  comments?: Maybe<CommentUpdateManyWithoutQueueInput>;
  status?: Maybe<StatusType>;
  updateAt?: Maybe<DateTimeInput>;
}

export interface UserUpdateWithoutCommentsDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  slips?: Maybe<SlipUpdateManyWithoutUserInput>;
  updateAt?: Maybe<DateTimeInput>;
}

export interface CommentCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  body: String;
  queue: QueueCreateOneWithoutCommentsInput;
  author: UserCreateOneWithoutCommentsInput;
  updateAt: DateTimeInput;
}

export interface SlipUpdateManyWithoutUserInput {
  create?: Maybe<SlipCreateWithoutUserInput[] | SlipCreateWithoutUserInput>;
  delete?: Maybe<SlipWhereUniqueInput[] | SlipWhereUniqueInput>;
  connect?: Maybe<SlipWhereUniqueInput[] | SlipWhereUniqueInput>;
  set?: Maybe<SlipWhereUniqueInput[] | SlipWhereUniqueInput>;
  disconnect?: Maybe<SlipWhereUniqueInput[] | SlipWhereUniqueInput>;
  update?: Maybe<
    | SlipUpdateWithWhereUniqueWithoutUserInput[]
    | SlipUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | SlipUpsertWithWhereUniqueWithoutUserInput[]
    | SlipUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<SlipScalarWhereInput[] | SlipScalarWhereInput>;
  updateMany?: Maybe<
    SlipUpdateManyWithWhereNestedInput[] | SlipUpdateManyWithWhereNestedInput
  >;
}

export interface CommentCreateWithoutAuthorInput {
  id?: Maybe<ID_Input>;
  title: String;
  body: String;
  queue: QueueCreateOneWithoutCommentsInput;
  updateAt: DateTimeInput;
}

export interface QueueUpdateWithoutSlipsDataInput {
  title?: Maybe<String>;
  comments?: Maybe<CommentUpdateManyWithoutQueueInput>;
  status?: Maybe<StatusType>;
  updateAt?: Maybe<DateTimeInput>;
}

export interface QueueUpdateOneRequiredWithoutSlipsInput {
  create?: Maybe<QueueCreateWithoutSlipsInput>;
  update?: Maybe<QueueUpdateWithoutSlipsDataInput>;
  upsert?: Maybe<QueueUpsertWithoutSlipsInput>;
  connect?: Maybe<QueueWhereUniqueInput>;
}

export interface SlipUpdateWithoutUserDataInput {
  processed?: Maybe<ProcessedType>;
  queue?: Maybe<QueueUpdateOneRequiredWithoutSlipsInput>;
  updateAt?: Maybe<DateTimeInput>;
}

export interface SlipUpdateWithWhereUniqueWithoutUserInput {
  where: SlipWhereUniqueInput;
  data: SlipUpdateWithoutUserDataInput;
}

export interface SlipSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SlipWhereInput>;
  AND?: Maybe<SlipSubscriptionWhereInput[] | SlipSubscriptionWhereInput>;
  OR?: Maybe<SlipSubscriptionWhereInput[] | SlipSubscriptionWhereInput>;
  NOT?: Maybe<SlipSubscriptionWhereInput[] | SlipSubscriptionWhereInput>;
}

export interface SlipCreateWithoutQueueInput {
  id?: Maybe<ID_Input>;
  processed: ProcessedType;
  user: UserCreateOneWithoutSlipsInput;
  updateAt: DateTimeInput;
}

export interface UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput;
  create: UserCreateWithoutCommentsInput;
}

export interface SlipUpdateInput {
  processed?: Maybe<ProcessedType>;
  queue?: Maybe<QueueUpdateOneRequiredWithoutSlipsInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutSlipsInput>;
  updateAt?: Maybe<DateTimeInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  createdAt: DateTimeOutput;
  updateAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updateAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updateAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Queue {
  id: ID_Output;
  title: String;
  status: StatusType;
  createdAt: DateTimeOutput;
  updateAt: DateTimeOutput;
}

export interface QueuePromise extends Promise<Queue>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  slips: <T = FragmentableArray<Slip>>(args?: {
    where?: SlipWhereInput;
    orderBy?: SlipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  status: () => Promise<StatusType>;
  createdAt: () => Promise<DateTimeOutput>;
  updateAt: () => Promise<DateTimeOutput>;
}

export interface QueueSubscription
  extends Promise<AsyncIterator<Queue>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  slips: <T = Promise<AsyncIterator<SlipSubscription>>>(args?: {
    where?: SlipWhereInput;
    orderBy?: SlipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  status: () => Promise<AsyncIterator<StatusType>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updateAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface QueueNullablePromise
  extends Promise<Queue | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  slips: <T = FragmentableArray<Slip>>(args?: {
    where?: SlipWhereInput;
    orderBy?: SlipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  status: () => Promise<StatusType>;
  createdAt: () => Promise<DateTimeOutput>;
  updateAt: () => Promise<DateTimeOutput>;
}

export interface Slip {
  id: ID_Output;
  processed: ProcessedType;
  createdAt: DateTimeOutput;
  updateAt: DateTimeOutput;
}

export interface SlipPromise extends Promise<Slip>, Fragmentable {
  id: () => Promise<ID_Output>;
  processed: () => Promise<ProcessedType>;
  queue: <T = QueuePromise>() => T;
  user: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updateAt: () => Promise<DateTimeOutput>;
}

export interface SlipSubscription
  extends Promise<AsyncIterator<Slip>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  processed: () => Promise<AsyncIterator<ProcessedType>>;
  queue: <T = QueueSubscription>() => T;
  user: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updateAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SlipNullablePromise
  extends Promise<Slip | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  processed: () => Promise<ProcessedType>;
  queue: <T = QueuePromise>() => T;
  user: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updateAt: () => Promise<DateTimeOutput>;
}

export interface QueueConnection {
  pageInfo: PageInfo;
  edges: QueueEdge[];
}

export interface QueueConnectionPromise
  extends Promise<QueueConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<QueueEdge>>() => T;
  aggregate: <T = AggregateQueuePromise>() => T;
}

export interface QueueConnectionSubscription
  extends Promise<AsyncIterator<QueueConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<QueueEdgeSubscription>>>() => T;
  aggregate: <T = AggregateQueueSubscription>() => T;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface SlipPreviousValues {
  id: ID_Output;
  processed: ProcessedType;
  createdAt: DateTimeOutput;
  updateAt: DateTimeOutput;
}

export interface SlipPreviousValuesPromise
  extends Promise<SlipPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  processed: () => Promise<ProcessedType>;
  createdAt: () => Promise<DateTimeOutput>;
  updateAt: () => Promise<DateTimeOutput>;
}

export interface SlipPreviousValuesSubscription
  extends Promise<AsyncIterator<SlipPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  processed: () => Promise<AsyncIterator<ProcessedType>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updateAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface SlipSubscriptionPayload {
  mutation: MutationType;
  node: Slip;
  updatedFields: String[];
  previousValues: SlipPreviousValues;
}

export interface SlipSubscriptionPayloadPromise
  extends Promise<SlipSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SlipPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SlipPreviousValuesPromise>() => T;
}

export interface SlipSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SlipSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SlipSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SlipPreviousValuesSubscription>() => T;
}

export interface AggregateSlip {
  count: Int;
}

export interface AggregateSlipPromise
  extends Promise<AggregateSlip>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSlipSubscription
  extends Promise<AsyncIterator<AggregateSlip>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Comment {
  id: ID_Output;
  title: String;
  body: String;
  createdAt: DateTimeOutput;
  updateAt: DateTimeOutput;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  body: () => Promise<String>;
  queue: <T = QueuePromise>() => T;
  author: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updateAt: () => Promise<DateTimeOutput>;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  body: () => Promise<AsyncIterator<String>>;
  queue: <T = QueueSubscription>() => T;
  author: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updateAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CommentNullablePromise
  extends Promise<Comment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  body: () => Promise<String>;
  queue: <T = QueuePromise>() => T;
  author: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updateAt: () => Promise<DateTimeOutput>;
}

export interface SlipConnection {
  pageInfo: PageInfo;
  edges: SlipEdge[];
}

export interface SlipConnectionPromise
  extends Promise<SlipConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SlipEdge>>() => T;
  aggregate: <T = AggregateSlipPromise>() => T;
}

export interface SlipConnectionSubscription
  extends Promise<AsyncIterator<SlipConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SlipEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSlipSubscription>() => T;
}

export interface CommentSubscriptionPayload {
  mutation: MutationType;
  node: Comment;
  updatedFields: String[];
  previousValues: CommentPreviousValues;
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValuesPromise>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface QueueEdge {
  node: Queue;
  cursor: String;
}

export interface QueueEdgePromise extends Promise<QueueEdge>, Fragmentable {
  node: <T = QueuePromise>() => T;
  cursor: () => Promise<String>;
}

export interface QueueEdgeSubscription
  extends Promise<AsyncIterator<QueueEdge>>,
    Fragmentable {
  node: <T = QueueSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface QueuePreviousValues {
  id: ID_Output;
  title: String;
  status: StatusType;
  createdAt: DateTimeOutput;
  updateAt: DateTimeOutput;
}

export interface QueuePreviousValuesPromise
  extends Promise<QueuePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  status: () => Promise<StatusType>;
  createdAt: () => Promise<DateTimeOutput>;
  updateAt: () => Promise<DateTimeOutput>;
}

export interface QueuePreviousValuesSubscription
  extends Promise<AsyncIterator<QueuePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<StatusType>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updateAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface QueueSubscriptionPayload {
  mutation: MutationType;
  node: Queue;
  updatedFields: String[];
  previousValues: QueuePreviousValues;
}

export interface QueueSubscriptionPayloadPromise
  extends Promise<QueueSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = QueuePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = QueuePreviousValuesPromise>() => T;
}

export interface QueueSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<QueueSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = QueueSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = QueuePreviousValuesSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CommentPreviousValues {
  id: ID_Output;
  title: String;
  body: String;
  createdAt: DateTimeOutput;
  updateAt: DateTimeOutput;
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  body: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updateAt: () => Promise<DateTimeOutput>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  body: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updateAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  createdAt: DateTimeOutput;
  updateAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  slips: <T = FragmentableArray<Slip>>(args?: {
    where?: SlipWhereInput;
    orderBy?: SlipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updateAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  slips: <T = Promise<AsyncIterator<SlipSubscription>>>(args?: {
    where?: SlipWhereInput;
    orderBy?: SlipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updateAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  slips: <T = FragmentableArray<Slip>>(args?: {
    where?: SlipWhereInput;
    orderBy?: SlipOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updateAt: () => Promise<DateTimeOutput>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateQueue {
  count: Int;
}

export interface AggregateQueuePromise
  extends Promise<AggregateQueue>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateQueueSubscription
  extends Promise<AsyncIterator<AggregateQueue>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SlipEdge {
  node: Slip;
  cursor: String;
}

export interface SlipEdgePromise extends Promise<SlipEdge>, Fragmentable {
  node: <T = SlipPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SlipEdgeSubscription
  extends Promise<AsyncIterator<SlipEdge>>,
    Fragmentable {
  node: <T = SlipSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Queue",
    embedded: false
  },
  {
    name: "Slip",
    embedded: false
  },
  {
    name: "Comment",
    embedded: false
  },
  {
    name: "StatusType",
    embedded: false
  },
  {
    name: "ProcessedType",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
