type Query {
  users(query: String): [User!]!
  queues(query: String): [Queue!]!
  slips(query: String): [Slip!]!
  comments(query: String): [Comment!]!
  me: User!
}

type Mutation {
  login(data: LoginUserInput!): AuthPayload!

  createUser(data: CreateUserInput!): AuthPayload!
  updateUser(id: ID!, data: UpdateUserInput!): User!
  deleteUser(id: ID!): User!

  createQueue(data: CreateQueueInput!): Queue!
  updateQueue(id: ID!, data: UpdateQueueInput!): Queue!
  deleteQueue(id: ID!): Queue!

  createSlip(data: CreateSlipInput!): Slip!
  updateSlip(id: ID!, data: UpdateSlipInput!): Slip!
  deleteSlip(id: ID!): Slip!

  createComment(data: CreateCommentInput!): Comment!
  updateComment(id: ID!, data: UpdateCommentInput!): Comment!
  deleteComment(id: ID!): Comment!
}

type Subscription {
  comment(queueId: ID!): CommentSubscriptionPayload!
  queue: QueueSubscriptionPayload!
  slip: SlipSubscriptionPayload!
}

type AuthPayload {
  token: String!
  user: User!
}

input LoginUserInput {
  email: String!
  password: String!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

input UpdateUserInput {
  name: String
  email: String
}

input CreateQueueInput {
  title: String!
}

input UpdateQueueInput {
  title: String
  user: ID
  processed: Boolean
  how_many_before: Int
  comments: ID
}

input CreateSlipInput {
  user: ID!
  queue: ID!
}

input UpdateSlipInput {
  user: ID
  queue: ID
}

input CreateCommentInput {
  title: String!
  body: String!
  queue: ID!
  author: ID!
}

input UpdateCommentInput {
  title: String
  body: String
  queue: ID
  author: ID
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  comments: [Comment!]!
  slips: [Slip!]!
}

type Queue {
  id: ID!
  title: String!
  slips: [Slip!]!
  comments: [Comment!]!
}

type Slip {
  id: ID!
  processed: Boolean!
  how_many_before: Int!
  queue: Queue!
  user: User!
}

type Comment {
  id: ID!
  title: String!
  body: String!
  queue: Queue!
  author: User!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type QueueSubscriptionPayload {
  mutation: MutationType!
  node: Queue
}

type SlipSubscriptionPayload {
  mutation: MutationType!
  node: Slip
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
}
